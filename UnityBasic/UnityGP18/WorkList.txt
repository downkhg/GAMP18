0. 용어정리
1)게임오브젝트: 하이라키상(씬)상에 존재하는 모든 물체.
2)타일팔래트: 타일맵을 만드는데 붓으로 칠하듯이 만들수있도록 도와주는 도구.
3)스크립트: 게임이 실행되는중에 인스펙터상에 내용을 변경하여, 작동하도록 코드를 작성함.
4)Vector3: 플레이어의 위치나 방향 거리를 나타내는 3차원.
5)DeltaTime: 초당프레임시간 1/프레임수로 나눈값.
6)RigidBody:
7)Collider:
8)컴포넌트: 
9)충돌체크: 물체와 물체의 관계를 계산하여 해당물체가 충돌되는지 연산하는 과정.
10)트리거와 콜리션: 트리거: 충돌되지만 통과됨. 콜리션: 충돌되고 통과할수없음.
11)태그:

1. 에셋스토어 > 창분리 후 최대화 > 상단 Asset메뉴 > 
   2D > FREE ASSET 체크 > Sunnyland > import
   
2. File > New Scene > Save > "Game.scene" 이름 지정 후 저장.

3. 맵만들기
1) GameObject > 2D Object > Tilemap 클릭
2) Hierachy > Grid 선택 > 
   Inspector > Grid > 
   SellSize > 타일맵오브젝트의 크기에 맞게 사이즈값을 비율로 줄여가며 적당한크기 찾기.
   ※절대 타일사이즈의 크기를 변경하지 말것!
3) Window > 2D > TilePalette > Inspector가 있는 탭에 도킹하기.
4) "Asset/Sunnyland/artwork/Environment/TilePalette"폴더 생성
5) TilePalette > CreateNewPalette > 4)에서 생성된 폴더에 저장.
6) "Asset/Sunnyland/artwork/Environment/"에서 
   tileset-sliced.png 에 타일사용할 타일을 TilePalette에 끌어넣기.
7) TilePalette > "붓도구"를 이용하여 그리드에 칠한다.

4. 플레이어 생성
1) "Asset/Sunnyland/artwork/Sprites/player"에서 
   아무 이미지나 Scene에 끌어넣기.
2) 상단 "무브툴"을 이용하여 케릭터의 위치를 변경하기.
3) Inspector > Transform > position에 값이 변경되는 것을 확인.

5. 플레이어 이동
1) "Asset/Scripts" 폴더 생성.
2) Project > "Asset/Script"폴더 오른쪽클릭 > Create > C# Script 생성.
3) 생성시 이름을 변경 "Dynamic"으로 변경. 
   ※만약 초기 생성시 이름을 변경하지 못하고 후에 변경하면 클래스의 이름과 파일명이 일치하지않음.
4) "Dynamic.cs"더블클릭후 vs를 통하여 코드 수정하기.
5) Start()에 transform.position += Vector3.right; 입력하기.
6) "플레이버튼"을 클릭하면 케릭터가 x축으로 +1만큼 이동한다.
7) Update에 5)의 코드를 잘라 붙여넣는다.
8) "플레이버튼"을 클릭하면 케릭터가 매 프레임마다 x축으로 +1만큼 이동하여 너무 빠르다.
9) transform.position += Vector3.right * Time.deletaTime;로 코드 수정하기.

10) (플레이어가 이동)하려면 (방향키)를 이용하여 이동한다. 
     -> 방향키(오른쪽왼쪽)키 중에 1개를 누룸. -> 키를 입력하면 이동한다.
	 구글링: 유니티 키 입력 -> 스크립팅 API -> 실행결과 테스트 -> 원하는것인지 확인.
	 키를 입력할때 방향만 변경하면 키마다 다른 기능을 사용할수있다.
11) 플레이어가 떨어지지않음 -> 중력 -> 유니티 중력 -> RigidBody2D
    충돌 - 콜라이더:부딧히는 물체 -> 타일맵 콜라이더
12) 점프 -> 다리로 바닥에 힘을 주어 위로 솟아오른다. -> 물체를 위로 던진다.(위로 힘을 가한다)
    -> 강체(RigidBody:중력 -> 물리관련)에 힘을 준다.
13) (바닥이 있어야만) 점프가 가능하다. -> 바닥에 있다? -> 플레이어와 타일이 충돌한다.
14) 발판을 딛고 올라가야함. -> 발판만들기 -> 발판이 개별로 충돌되어 문제가 발생함.
    -> 땅인지 확인하는것을 점프인지 아닌지 확인하는 것으로 변경.
	-> 발판을 뚧고 올라가서 설수있어야한다. -> 플렛포머이펙트
15) 아이템만들어서 점수 획득. -> (이이템을 먹으면:닿으면 사라진다) (플레이어 점수?)가 오른다.
	-> 아이템에 닿이면 아이템은 사라지고, 플레이어의 점수가 오른다.
	-> (아이템:게임오브젝트)은 (닿이면:enter) (사라진다:삭제). ->
	-> 오브젝트의 이름으로 확인하면 이름이 다른 경우 따로 조건을 추가해야해서 번거롭다.
	-> 오브젝트에 태그를 설정해 객체가 다르더라도 구분할수 있는 수단을 설정한다.
	-> 체리와 젬은 같은 아이템이 아니지만 고정된 점수가 오른다.
	-> Item스크립트를 생성하고, 점수의 값을 변경하고 아이템에서 플레이어의 점수를 오르게 만든다.
	-> Dynamic 스크립트가 없는 대상에서는 받아올수없으므로, 태그를 이용하여 플레이어를 구별하여 작동하게한다.

문제1) 사다리 만들어보기
사다리? 위아래로 이동가능한 수단. > 사다리에서 위/아래로 이동이 가능하다. > 
사다리에 접촉하면, 나가면 X > 구상한 내용대로 구현하면서 문제점을 찾는다. 
> 플레이어의 콜라이더 크기, 중력 > 몰라도 구현하며 문제점을 관찰하면 문제를 해결할수있다.

16) 몬스터 만들기 -> 죽는다? (플레이어:게임오브젝트)가 사리진다.
    Opossum -> 콜라이더 -> 닿이면 플레이어 사망 -> 이동추가 -> RigidBody추가
     홀로그램 ->   장애물 ->      함정   -> 비행형 몬스터 -> 지상형 몬스터

17) 총만들기 
	총? 원거리 공격 무기 -> 멀리서 공격하는 무기 -> 투사체 무기 
	-> 투사체: 던저서 날라가는 것
	-> 총? (총알:오브젝트)을 (발사:힘을 가한다)하는 것. -> 공이 됨.
	-> 공? 총알 한개에 힘을 가함. 
	-> 총은 총알을 여러개 장전해서 발사함. -> 총알을 계속 생성해야함.
	-> 총알을 삭제해야함. -> 일정시간후에 삭제 -> 일반적이지않음.
	-> 게임에서는 사거리가 중요함. -> 시작위치와 현재위치의 거리를 비교.
	-> (몬스터:오브젝트)가 맞으면 (사망:삭제) ->
	
18) 떨어지면 사망하게 만들기
	-> y축이 일정이하면 죽는다. -> (바닥아래:오브젝트) 부딧히면 죽는다.

19) 부활하기 (타이머: 코루틴)
	-> 부활? 죽었다가 살아나는 것 -> 오브젝트가 삭제되어았다가 생성된다.
	-> 삭제하고 다시 만든다. -> 떨어질때, 공격(총알,몬스터)

   
   