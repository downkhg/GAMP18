0. 용어정리
1)게임오브젝트: 하이라키상(씬)상에 존재하는 모든 물체.
2)타일팔래트: 타일맵을 만드는데 붓으로 칠하듯이 만들수있도록 도와주는 도구.
3)스크립트: 게임이 실행되는중에 인스펙터상에 내용을 변경하여, 작동하도록 코드를 작성함.
4)Vector3: 플레이어의 위치나 방향 거리를 나타내는 3차원.
5)DeltaTime: 초당프레임시간 1/프레임수로 나눈값.
6)RigidBody:
7)Collider:
8)컴포넌트: 
9)충돌체크: 물체와 물체의 관계를 계산하여 해당물체가 충돌되는지 연산하는 과정.
10)트리거와 콜리션: 트리거: 충돌되지만 통과됨. 콜리션: 충돌되고 통과할수없음.
11)태그:
12)프리팹: 오브젝트에 추가되어있는 컴포넌트를 포함하여, 새 오브젝트로 복제가능하도록 저장하는 것.
13)코루틴: 함수의 기능을 지정한 옵션만큼 대기하고 그뒤에 결과를 실행한다.


1. 에셋스토어 > 창분리 후 최대화 > 상단 Asset메뉴 > 
   2D > FREE ASSET 체크 > Sunnyland > import
   
2. File > New Scene > Save > "Game.scene" 이름 지정 후 저장.

3. 맵만들기
1) GameObject > 2D Object > Tilemap 클릭
2) Hierachy > Grid 선택 > 
   Inspector > Grid > 
   SellSize > 타일맵오브젝트의 크기에 맞게 사이즈값을 비율로 줄여가며 적당한크기 찾기.
   ※절대 타일사이즈의 크기를 변경하지 말것!
3) Window > 2D > TilePalette > Inspector가 있는 탭에 도킹하기.
4) "Asset/Sunnyland/artwork/Environment/TilePalette"폴더 생성
5) TilePalette > CreateNewPalette > 4)에서 생성된 폴더에 저장.
6) "Asset/Sunnyland/artwork/Environment/"에서 
   tileset-sliced.png 에 타일사용할 타일을 TilePalette에 끌어넣기.
7) TilePalette > "붓도구"를 이용하여 그리드에 칠한다.

4. 플레이어 생성
1) "Asset/Sunnyland/artwork/Sprites/player"에서 
   아무 이미지나 Scene에 끌어넣기.
2) 상단 "무브툴"을 이용하여 케릭터의 위치를 변경하기.
3) Inspector > Transform > position에 값이 변경되는 것을 확인.

5. 플레이어 이동
1) "Asset/Scripts" 폴더 생성.
2) Project > "Asset/Script"폴더 오른쪽클릭 > Create > C# Script 생성.
3) 생성시 이름을 변경 "Dynamic"으로 변경. 
   ※만약 초기 생성시 이름을 변경하지 못하고 후에 변경하면 클래스의 이름과 파일명이 일치하지않음.
4) "Dynamic.cs"더블클릭후 vs를 통하여 코드 수정하기.
5) Start()에 transform.position += Vector3.right; 입력하기.
6) "플레이버튼"을 클릭하면 케릭터가 x축으로 +1만큼 이동한다.
7) Update에 5)의 코드를 잘라 붙여넣는다.
8) "플레이버튼"을 클릭하면 케릭터가 매 프레임마다 x축으로 +1만큼 이동하여 너무 빠르다.
9) transform.position += Vector3.right * Time.deletaTime;로 코드 수정하기.

10) (플레이어가 이동)하려면 (방향키)를 이용하여 이동한다. 
     -> 방향키(오른쪽왼쪽)키 중에 1개를 누룸. -> 키를 입력하면 이동한다.
	 구글링: 유니티 키 입력 -> 스크립팅 API -> 실행결과 테스트 -> 원하는것인지 확인.
	 키를 입력할때 방향만 변경하면 키마다 다른 기능을 사용할수있다.
11) 플레이어가 떨어지지않음 -> 중력 -> 유니티 중력 -> RigidBody2D
    충돌 - 콜라이더:부딧히는 물체 -> 타일맵 콜라이더
12) 점프 -> 다리로 바닥에 힘을 주어 위로 솟아오른다. -> 물체를 위로 던진다.(위로 힘을 가한다)
    -> 강체(RigidBody:중력 -> 물리관련)에 힘을 준다.
13) (바닥이 있어야만) 점프가 가능하다. -> 바닥에 있다? -> 플레이어와 타일이 충돌한다.
14) 발판을 딛고 올라가야함. -> 발판만들기 -> 발판이 개별로 충돌되어 문제가 발생함.
    -> 땅인지 확인하는것을 점프인지 아닌지 확인하는 것으로 변경.
	-> 발판을 뚧고 올라가서 설수있어야한다. -> 플렛포머이펙트
15) 아이템만들어서 점수 획득. -> (이이템을 먹으면:닿으면 사라진다) (플레이어 점수?)가 오른다.
	-> 아이템에 닿이면 아이템은 사라지고, 플레이어의 점수가 오른다.
	-> (아이템:게임오브젝트)은 (닿이면:enter) (사라진다:삭제). ->
	-> 오브젝트의 이름으로 확인하면 이름이 다른 경우 따로 조건을 추가해야해서 번거롭다.
	-> 오브젝트에 태그를 설정해 객체가 다르더라도 구분할수 있는 수단을 설정한다.
	-> 체리와 젬은 같은 아이템이 아니지만 고정된 점수가 오른다.
	-> Item스크립트를 생성하고, 점수의 값을 변경하고 아이템에서 플레이어의 점수를 오르게 만든다.
	-> Dynamic 스크립트가 없는 대상에서는 받아올수없으므로, 태그를 이용하여 플레이어를 구별하여 작동하게한다.

문제1) 사다리 만들어보기
사다리? 위아래로 이동가능한 수단. > 사다리에서 위/아래로 이동이 가능하다. > 
사다리에 접촉하면, 나가면 X > 구상한 내용대로 구현하면서 문제점을 찾는다. 
> 플레이어의 콜라이더 크기, 중력 > 몰라도 구현하며 문제점을 관찰하면 문제를 해결할수있다.

16) 몬스터 만들기 -> 죽는다? (플레이어:게임오브젝트)가 사리진다.
    Opossum -> 콜라이더 -> 닿이면 플레이어 사망 -> 이동추가 -> RigidBody추가
     홀로그램 ->   장애물 ->      함정   -> 비행형 몬스터 -> 지상형 몬스터

17) 총만들기 
	총? 원거리 공격 무기 -> 멀리서 공격하는 무기 -> 투사체 무기 
	-> 투사체: 던저서 날라가는 것
	-> 총? (총알:오브젝트)을 (발사:힘을 가한다)하는 것. -> 공이 됨.
	-> 공? 총알 한개에 힘을 가함. 
	-> 총은 총알을 여러개 장전해서 발사함. -> 총알을 계속 생성해야함.
	-> 총알을 삭제해야함. -> 일정시간후에 삭제 -> 일반적이지않음.
	-> 게임에서는 사거리가 중요함. -> 시작위치와 현재위치의 거리를 비교.
	-> (몬스터:오브젝트)가 맞으면 (사망:삭제) ->
	
18) 떨어지면 사망하게 만들기
	-> y축이 일정이하면 죽는다. -> (바닥아래:오브젝트) 부딧히면 죽는다.

19) 부활하기 (타이머: 코루틴)
	-> 부활? 죽었다가 살아나는 것 -> 오브젝트가 삭제되어았다가 생성된다.
	-> 삭제하고 다시 만든다. -> 떨어질때, 공격(총알,몬스터)
	-> 삭제하고 (원래 있던 자리:트랜스폼:포지션:벡터 -> 숫자로 저장)에 다시 만든다.
	-> 플레이어는 삭제되면 존재하지 않기때문에 부활을 플레이어에서 처리할수 없으므로 다른 오브젝트가 필요하다.
문제2. 몬스터를 부활하게 만들기
문제3. 몬스터와 플레이어의 부활시간을 다르게 만들기(단, 부활용스크립트는 1개로 작성하기)
문제4. 플레이어와 몬스터에 속도를 넣어보기

20) 독수리 만들기
	->비행형 몬스터 -> 일정범위안에 플레이어가 들어오면 추적하도록 만들기.
	-> 플레이어가 죽거나 범위를 벗어나면 원래위치로 돌아가기
	-> 특정위치를 순찰하기
	(일정범위안:트리거)에 플레이어가 들어오면 (추적:대상의 위치로 이동)하도록 만들기
	->총알도 트리거이므로, 추적범위에서 총알을 맞으면 독수리가 죽는다.
	->트리거 -> (FixedUpdate)에 (오버랩서클)을 이용한다.
	->오버랩? 물리없이 충돌체크.-> 3자입장에서 충돌체크하므로, 자기자신도 충돌대상에 포함된다.
	->레이어? 특정대상만 충돌하도록 지정하는 것. -> 컴퓨터에 연산량도 감소시킬수있음.
	->몬스터 사망 만들기
21) 원래 있던 위치로 돌아가기.
	-> 리스폰위치로 돌아가기 -> 리스폰위치는 사망후 초기화 된다. 
	-> 리스포너에서 알려줄수도있지만. 부활자는 부활역할 수행해야하고, 
	독수리에 대해서만 예외처리를 한다면, 비효률적인 연산이 될수있다.
	-> 게임관리자가 독수리 일때만 독수리의 돌아갈 위치를 정해준다.
22) 정찰기능 추가하기
	-> A(자기자신) 위치에서 출발하여 B(지정된) 위치로 이동하고, B에 도착하면 A로 이동한다.
	-> A:자신의 부활자위치 B:주머니쥐의 부활자위치
	
문제5. 부활한 독수리도 순찰가능하도록 만들기.
   
   